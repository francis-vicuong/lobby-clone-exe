'use strict';

/**Need to use  mobile detect */
var lbHelper = {
    fullscreenEnabled: document.fullscreenEnabled || document.mozFullScreenEnabled || document.documentElement.webkitRequestFullScreen,

    mobileClass: {
        mobile: 'mobile',
        tablet: 'tablet',
        desktop: 'desktop',
        phone: 'phone',
        ios: 'ios'
    },
    removeClass: function removeClass(e, c) {
        e.className = e.className.replace(new RegExp('(?:^|s)' + c + '(?!S)'), '');
    },
    responsive: function responsive() {
        // $('html').attr('class', '');
        this.cleanResponsiveClass();

        var md = new MobileDetect(window.navigator.userAgent);

        /*** add class for html
         * - Phone - Desktop - Tablet
         * - OS: ios, android,...
         ***/
        var html = document.getElementsByTagName('html')[0];

        // Desktop
        if (md.mobile() == null) {
            html.classList.add(this.mobileClass.desktop);
        } else {
            // Mobile
            // Is mobile
            if (md.mobile() != null && md.isPhoneSized()) {
                html.classList.add(this.mobileClass.mobile);
            }
            // Is phone
            if (md.phone() != null) {
                html.classList.add(this.mobileClass.phone);
            }
            // Is tablet
            if (md.tablet() != null) {
                html.classList.add(this.mobileClass.tablet);
            }

            // Add class for os 
            var _browser = md.os().toLowerCase();
            _browser = _browser != 'ios' ? _browser.replace(/os/g, '') : _browser;
            html.classList.add(_browser);
        }

        // Force add in desktop mode resize
        if (!html.classList.contains(this.mobileClass.mobile) || html.classList.contains(this.mobileClass.desktop)) {
            var widthWindow = window.innerWidth;
            if (widthWindow <= 768) {
                html.classList.add(this.mobileClass.mobile);
                this.removeClass(html, this.mobileClass.desktop);

                if (widthWindow < 320) {
                    html.classList.add(this.mobileClass.phone);
                    this.removeClass(html, this.mobileClass.tablet);
                } else {
                    html.classList.add(this.mobileClass.tablet);
                    this.removeClass(html, this.mobileClass.phone);
                }
            } else {
                html.classList.add(this.mobileClass.desktop);
                this.removeClass(html, this.mobileClass.mobile);
                this.removeClass(html, this.mobileClass.tablet);
                this.removeClass(html, this.mobileClass.phone);
            }
        }
    },
    formatString: function formatString(str, obj) {
        if (typeof obj === 'Array') {
            return str.replace(/\{\s*([^}\s]+)\s*\}/g, function (m, p1, offset, string) {
                return obj[p1];
            });
        } else {
            return str.replace(/\{0}/g, obj);
        }
    },
    getParameterByName: function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    },
    cleanResponsiveClass: function cleanResponsiveClass() {
        if ($('html').attr('class') != undefined && $('html').attr('class') != '') {
            var classes = $('html').attr('class').split(' ');
            var listClass = Object.keys(lbHelper.mobileClass).map(function (key) {
                return lbHelper.mobileClass[key];
            });
            for (var i = 0; i < classes.length; i++) {
                var cls = classes[i];
                if (listClass.indexOf(cls) > -1) {
                    $('html').removeClass(cls);
                }
            }
        }
    },
    isMobile: function isMobile() {
        return $('html').hasClass(this.mobileClass.phone) || $('html').hasClass(this.mobileClass.mobile);
    },
    isIos: function isIos() {
        return $('html').hasClass(this.mobileClass.ios);
    },
    requestFullscreen: function requestFullscreen(element) {
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        } else if (element.webkitRequestFullScreen) {
            element.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
        }
    }
};

var lb = {
    lazy: 'lb-lazy',
    not_found_img: 'dist/img/notfound.jpg',
    toggle_btn: 'lb-toggle-list-btn',
    toggle_list: 'lb-toggle-list',
    canvas_id: '#lb-canvas',
    hide_canvas: '.hide-on-canvas-showed',
    marquee_cls: '.lb-marquee',
    slide_game_id: '#slide-game',
    lobby_menu: '#lobby-menu',
    slide_game: undefined,
    slide_jack: undefined,
    shadow_text: '.shadow-text',
    alert_landscape: '.lb-landscape',
    show_alert: 'show-alert',
    first_fullscreen: false,
    init: function init() {
        // responsive class in html
        lbHelper.responsive();
        this.init_mobile();

        // lazy image
        this.lazy_load();

        // jackpot slide
        this.jack();

        // init all list toggle if this has been length
        this.init_list_toggle();

        // create demo canvas, check by is_dev function
        this.canvas.create();

        // init marque duration time
        this.init_marquee();

        // lobby all game slide
        this.init_game_slide();

        // click to menu in lobby filter
        this.game_menu_click();

        // check resize window function
        $(window).resize(function () {
            lbHelper.responsive();
        });

        // init shadow text
        this.init_shadow_text();
        this.on_rotate();
    },
    lazy_load: function lazy_load() {
        var __noImagelink = this.not_found_img;

        var bLazy = new Blazy({
            selector: '.' + this.lazy,
            success: function success(ele) {},
            error: function error(ele, msg) {
                if ($(ele).context.nodeName === "IMG") {
                    $(ele).attr('src', __noImagelink);
                } else {
                    $(ele).css('background-image', 'url("' + __noImagelink + '")');
                }
            }
        });
    },
    init_demo_canvas: function init_demo_canvas() {},
    jack: function jack() {
        if ($('#jack_slide').length > 0) {
            this.slide_jack = $('#jack_slide').owlCarousel({
                loop: true,
                margin: 50,
                center: true,
                nav: false,
                dots: false,
                lazyLoad: true,
                autoplayHoverPause: true,
                autoplay: true,
                autoplaySpeed: 3000,
                items: 1
            });
            // this.slide_jack.trigger('initialized.owl.carousel', function(e) {
            //     this.slide_jack.trigger('next.owl.carousel');
            // })
        }
    },
    init_list_toggle: function init_list_toggle() {
        var $this = this;
        if ($('.' + $this.toggle_btn).length > 0) {
            $('.' + $this.toggle_btn).click(function () {
                var menu = $(this).find('.' + $this.toggle_list);

                if ($(menu).length > 0) {
                    if ($(menu).hasClass('opened')) {
                        $(menu).removeClass('opened').addClass('closed');
                    } else {
                        $('.' + $this.toggle_list).removeClass('opened').addClass('closed');
                        $(menu).removeClass('closed').addClass('opened');
                    }
                }
            });
            $("html, body").click(function (e) {
                if ($(e.target).hasClass('' + $this.toggle_btn)) {
                    return false;
                }
                $('.' + $this.toggle_list).removeClass('opened').addClass('closed');
            });
        }
        this.init_change_download();
        this.init_change_lang();
    },
    init_change_lang: function init_change_lang() {
        $('.lang-list .lang-item').click(function (a) {
            var lang = $(this).data("lang");
            setCookie('lang', lang, null, '/');
            location.reload(true);
        });
    },
    init_change_download: function init_change_download() {
        $('.selectDowload .lang-item').click(function (a) {
            var urlredirect = $(this).data("urlredirect");
            window.location.href = urlredirect;
        });
    },
    is_dev: function is_dev() {
        return $('body').data('enviroment') == 'dev';
    },
    init_marquee: function init_marquee() {
        if ($('' + this.marquee_cls).length > 0) {
            $('' + this.marquee_cls).each(function () {
                var contain = $(this).find('.contain');
                if ($(contain).length > 0) {
                    var time = $(contain).data('time');
                    if (time) {
                        $(contain).css('animation-duration', time + 's');
                    }
                }
            });
        }
    },
    init_game_slide: function init_game_slide() {
        if (lbHelper.isMobile()) {
            if (this.slide_game) {
                this.slide_game.trigger('destroy.owl.carousel');
            }
            $(this.slide_game_id).css('display', 'block');
            $(this.slide_game_id).addClass('games-mobile');
        } else {
            if ($(this.slide_game_id).length > 0) {
                this.slide_game = $(this.slide_game_id).owlCarousel({
                    loop: false,
                    margin: 0,
                    center: false,
                    nav: true,
                    dots: false,
                    lazyLoad: true,
                    autoplayHoverPause: true,
                    autoplay: false,
                    autoplaySpeed: 1000,
                    autoplayTimeout: 3000,
                    items: 2,
                    autoWidth: true,
                    navText: ['<img src="dist/img/game-slide-arrow.png"/>', '<img src="dist/img/game-slide-arrow.png"/>']
                });
            }
        }
    },
    game_menu_click: function game_menu_click() {
        if ($(this.lobby_menu).length > 0) {
            var _target = $(this.lobby_menu).data('target');
            _target = _target ? _target : '#slide-game';

            var items = $(this.lobby_menu + ' li a[data-type]');

            if ($(items).length > 0) {

                $(items).click(function () {

                    var __type = $(this).data('type');
                    // all game 
                    if (__type == 0) {
                        // show split
                        $(_target + ' .game .split').show();
                        $(_target + ' .game').removeClass('not-split show-alone');

                        // show all group
                        $(_target + ' .game').show();
                    } else {
                        // follow type
                        // hide all group
                        $(_target + ' .game').hide();

                        // show only group by __type
                        $(_target + ' .game[data-type=\'' + __type + '\']').show();

                        // hide split
                        $(_target + ' .game .split').hide();
                        $(_target + ' .game').addClass('not-split show-alone');
                    }

                    // active & un-active item
                    $(items).parent().removeClass('active');
                    $(this).parent().addClass('active');

                    // refresh slide
                    if (lb.slide_game) {
                        lb.slide_game.trigger('refresh.owl.carousel');
                    }
                });
            }
        }
    },
    init_shadow_text: function init_shadow_text() {
        $(this.shadow_text).each(function () {
            $(this).html('<span class="main-text">' + $(this).text() + '</span><span class="text-shadow">' + $(this).text() + '</span>');
        });
    },
    init_mobile: function init_mobile() {
        if (lbHelper.isMobile()) {
            this.init_landscape();
            if (!this.check_landscape()) {
                // check if ios, alert, android force landscape
                if (lbHelper.isIos()) {
                    this.toggle_landscape(true);
                } else {
                    if (this.requestFullscreen()) {
                        if (this.lock_landscape()) {
                            this.toggle_landscape(false); // hide
                        } else {
                            this.toggle_landscape(true); // show
                        }
                    } else {
                        this.toggle_landscape(true); // show
                    }
                }
            } else {
                this.toggle_landscape(false); // show
            }
        }
    },
    toggle_landscape: function toggle_landscape(_show) {
        if (_show) {
            $(this.alert_landscape).show();
            $('body').addClass(this.show_alert);
        } else {
            $(this.alert_landscape).hide();
            $('body').removeClass(this.show_alert);
        }
    },
    init_landscape: function init_landscape() {
        if ($(this.alert_landscape).length == 0) {
            $('body').append('<div class="lb-landscape" style="background-image: url(\'dist/img/bg.png\')"><div class="message"></div></div>');
        }
        $(this.alert_landscape).each(function () {
            lb.set_landscape_text($(this));
        });
    },
    set_landscape_text: function set_landscape_text(_land) {
        var _mess = $(_land).find('.message');
        var text = 'Please enable your landscape mode to play game!';

        if ($(_mess).length > 0 && $(_mess).data('text') && $(_mess).data('text') != '') {
            text = $(_mess).data('text');
        }
        $(_mess).html(text);
    },
    on_rotate: function on_rotate() {
        var supportsOrientationChange = "onorientationchange" in window,
            orientationEvent = supportsOrientationChange ? "orientationchange" : "resize";

        if (supportsOrientationChange) {
            $('html').addClass('rotate-0');
        }

        window.addEventListener(orientationEvent, function () {
            setTimeout(function () {
                lb.init_mobile();

                var cls = 'rotate-0 rotate-90 rotate-270';
                $('html').removeClass(cls);
                $('html').addClass('rotate-' + screen.orientation.angle);
            }, 100);
        }, false);

        window.addEventListener("orientationchange", function () {
            alert("orientation: " + screen.orientation.angle);
        });
    },
    requestFullscreen: function requestFullscreen() {
        if (!this.first_fullscreen) {
            document.body.webkitRequestFullScreen();
        }
        // if (lbHelper.fullscreenEnabled) {
        //     try {
        //         lbHelper.requestFullscreen(document.body);

        //         document.onfullscreenchange = function (event) {

        //         }

        //         document.onfullscreenerror = function (event) {
        //             return false;
        //         }
        //     } catch (err) {}
        //     return true;
        // } else {
        //     return false;
        // }
    },
    lock_landscape: function lock_landscape() {
        if ("orientation" in screen) {
            var locOrientation = screen.lockOrientation || screen.mozLockOrientation || screen.msLockOrientation || screen.orientation.lock;
            locOrientation('landscape');
            return true;
        } else {
            return false;
        }
    },
    check_landscape: function check_landscape() {
        return window.innerHeight < window.innerWidth;
    },
    canvas: {
        create: function create() {
            if (lb.is_dev()) {
                var canvas = document.getElementById("game-demo");
                var ctx = canvas.getContext("2d");
                canvas.width = 1280;
                canvas.height = 600;
                canvas.style.background = '#fff';
            }
        },
        show: function show() {
            $(lb.canvas_id).removeClass('hide').addClass('show');
            $('body').addClass('show-canvas');
            $(lb.hide_canvas).addClass('hide');
        },
        hide: function hide() {
            $(lb.canvas_id).addClass('hide').removeClass('show');
            $('body').removeClass('show-canvas');
            $(lb.hide_canvas).removeClass('hide');
        }
    }
};

$(document).ready(function () {
    lb.init();
    $('html, body').click(function () {
        lb.requestFullscreen();
        lb.lock_landscape();
    });
});